/* 1ms 속도 일때 전체 반복문 도는 시간에 따라 delay자동으로 주게 해놨음.
그리고 1ms가속 +감속 동안 걸린 시간 도출
*/

/*
3ms속도=-((sec*sec*sec*3)/4)+((sec*sec*9)/4);
2ms속도=-((sec*sec*sec)*4)+((sec*sec*6));
1ms속도=-(16*sec*sec*sec)+(12*sec*sec);
-1ms속도=-(-(16*sec*sec*sec)+(12*sec*sec));
*/


max_time_3ms=2;
max_time_2ms=1;
max_time_1ms=0.5;
scale_3ms=0.01;
scale_2ms=0.02;
scale_1ms=0.01;

delay_3ms=19.3;
delay_2ms=10.2;
delay_1ms=9;

r = getv (_wheel_radius, 0);		// 바퀴 반지름
// b = getv (_axle_length, 0);	
g = getv (_gear_ratio, 0);			// 감속비

enc = getv (_encoder_ppr, 2);	// 엔코더 해상도
enc2_first = getv (_position, 2); //초기 엔코더 값

pulse2met = 2*_PI*r/g/enc;		// 엔코더 펄스를 meter로 바꾸는 scale factor
sec=0;
met2rpm=60/(_PI*2*r);
while (1) {
//1ms속도-----------------------------------------------

    FIRST_TIME=clock();
    VEL=1111;
    while (sec<max_time_1ms){
		cycle_start_time=clock();
        v2=-(16*sec*sec*sec)+(12*sec*sec);
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec+scale_1ms;

		//원하는 시간만큼 돌리기

   		cycle_end_time=clock();
  		cycle_time=cycle_end_time-cycle_start_time;
   		target_delay=(500/50)-cycle_time;
  		sleep(target_delay);	
	}

    while (sec>0){
		cycle_start_time=clock();
        v2=-(16*sec*sec*sec)+(12*sec*sec);
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec-scale_1ms;

		//원하는 시간만큼 돌리기

    	cycle_end_time=clock();
	    cycle_time=cycle_end_time-cycle_start_time;
    	target_delay=(500/50)-cycle_time;
	    sleep(target_delay);

	}
	TIME=FIRST_TIME-clock();

	enc2 = getv (_position, 2);//엔코더값 읽기
	de2 = enc2 - enc2_first;//처음 엔코더값과 차이
    enc_meter=de2 *pulse2met;//엔코더 값 차이를 meter단위로 변환
	enc2_first = enc2;//초기 엔코더 값을 현재 엔코더값으로 변환
    
    sleep(1000);

//2ms속도----------------------------------------------

	FIRST_TIME=clock();
	VEL=2222;    
	while (sec<max_time_2ms){
		cycle_start_time=clock();
        v2=-((sec*sec*sec)*4)+((sec*sec*6));
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec+scale_2ms;

		//원하는 시간만큼 돌리기

    	cycle_end_time=clock();
	    cycle_time=cycle_end_time-cycle_start_time;
    	target_delay=(1000/50)-cycle_time;
	    sleep(target_delay);
	}
    while (sec>0){
		cycle_start_time=clock();
        v2=-((sec*sec*sec)*4)+((sec*sec*6));
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec-scale_2ms;

		//원하는 시간만큼 돌리기

    	cycle_end_time=clock();
	    cycle_time=cycle_end_time-cycle_start_time;
    	target_delay=(1000/50)-cycle_time;
	    sleep(target_delay);
	}
	TIME=FIRST_TIME-clock();


	enc2 = getv (_position, 2);//엔코더값 읽기
	de2 = enc2 - enc2_first;//처음 엔코더값과 차이
    enc_meter=de2 *pulse2met;//엔코더 값 차이를 meter단위로 변환
	enc2_first = enc2;//초기 엔코더 값을 현재 엔코더값으로 변환

	sleep(1000);



/*
파워서플라이 전원으로는 3ms속도 안나옴
//3ms속도---------------------------------------------
	VEL=3333;    
	while (sec<max_time_3ms){
        v2=-((sec*sec*sec*3)/4)+((sec*sec*9)/4);
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec+scale_3ms;
		sleep(delay_3ms);
	}
    while (sec>0){
        v2=-((sec*sec*sec*3)/4)+((sec*sec*9)/4);
		Rpm2   = v2*met2rpm;
        setv(_velocity_command, 2, Rpm2);
		enc2 = getv (_position, 2);
		sec=sec-scale_3ms;
		sleep(delay_3ms);

	}
*/
    
}

